{
  "contractName": "MerkleTreeWithHistoryMock",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_treeLevels",
          "type": "uint32"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_treeLevels\",\"type\":\"uint32\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/Mocks/MerkleTreeWithHistoryMock.sol\":\"MerkleTreeWithHistoryMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/MerkleTreeWithHistory.sol\":{\"keccak256\":\"0xfe7b4307876bc6ec8cf7b1598977d49e4ace5a0dd8d39b908a113dc21be0b3bc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b67f28d13afd29704e797242c7fea4e20e6a407ead8dd1b4fa955d9189a501b\",\"dweb:/ipfs/QmQtYhDm1d13QGntcPssd7Vet1YpZcGHN8u8XFKzZw627z\"]},\"/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/Mocks/MerkleTreeWithHistoryMock.sol\":{\"keccak256\":\"0x7a07cd2eb7531ae3977bc46b7392cef73d323478c0119ab2c4561325d46b9d31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd29860549b60580bcaae0612bc341c5c0a423f199e24eefe1bc54037367ddb9\",\"dweb:/ipfs/QmVU6W8JRd6EATrgt6gHeDoU2hwDv1NGsfv34JrEpdnEGv\"]}},\"version\":1}",
  "bytecode": "0x60c0604052600280546001600160401b03191690553480156200002157600080fd5b50604051620016ab380380620016ab833981810160405260408110156200004757600080fd5b508051602090910151818163ffffffff8216620000965760405162461bcd60e51b8152600401808060200182810382526023815260200180620016886023913960400191505060405180910390fd5b60208263ffffffff1610620000f2576040805162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000604482015290519081900360640190fd5b6001600160e01b031960e083901b1660a0526001600160601b0319606082901b1660805260005b8263ffffffff168163ffffffff1610156200015e576200013f63ffffffff8216620001aa565b63ffffffff821660009081526020819052604090205560010162000119565b506200017463ffffffff600019840116620001aa565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955506200083892505050565b600081620001da57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c62000833565b81600114156200020c57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d62000833565b81600214156200023e57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c20062000833565b81600314156200027057507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb62000833565b8160041415620002a257507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c962000833565b8160051415620002d457507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb5495962000833565b81600614156200030657507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c62000833565b81600714156200033857507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb462000833565b81600814156200036a57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff8062000833565b81600914156200039b57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c00762000833565b81600a1415620003cd57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e3062000833565b81600b1415620003ff57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e562000833565b81600c14156200043157507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f62000833565b81600d14156200046357507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd62000833565b81600e14156200049557507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb10862000833565b81600f1415620004c757507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b662000833565b8160101415620004f957507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db6185462000833565b81601114156200052b57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea62000833565b81601214156200055d57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d62000833565b81601314156200058f57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc0562000833565b8160141415620005c157507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d462000833565b8160151415620005f357507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b296762000833565b81601614156200062557507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc345362000833565b81601714156200065757507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c4862000833565b81601814156200068957507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd162000833565b8160191415620006bb57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c62000833565b81601a1415620006ed57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce9962000833565b81601b14156200071f57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f35462000833565b81601c14156200075057507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d62000833565b81601d14156200078257507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f42762000833565b81601e1415620007b457507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb62000833565b81601f1415620007e657507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc62000833565b6040805162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e647300000000000000000000000000604482015290519081900360640190fd5b919050565b60805160601c60a05160e01c610e1762000871600039806102705280610bd55280610c41525080610b735280610ccd5250610e176000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063c2b40ae41161008c578063ec73295911610066578063ec732959146101fe578063ed33639f14610206578063f178e47c1461022a578063fc7e9c6f14610247576100ea565b8063c2b40ae4146101bc578063cd87a3b4146101d9578063e8295588146101e1576100ea565b80636d9833e3116100c85780636d9833e3146101495780638ea3099e1461017a57806390eeb02b146101ac578063ba70f757146101b4576100ea565b80632d287e43146100ef578063414a37ba1461010e5780634ecf518b14610128575b600080fd5b61010c6004803603602081101561010557600080fd5b503561024f565b005b61011661025c565b60408051918252519081900360200190f35b61013061026e565b6040805163ffffffff9092168252519081900360200190f35b6101666004803603602081101561015f57600080fd5b5035610292565b604080519115158252519081900360200190f35b6101166004803603606081101561019057600080fd5b506001600160a01b038135169060208101359060400135610304565b6101306104d0565b6101166104dc565b610116600480360360208110156101d257600080fd5b50356104f7565b610130610509565b610116600480360360208110156101f757600080fd5b503561050e565b610116610b4d565b61020e610b71565b604080516001600160a01b039092168252519081900360200190f35b6101166004803603602081101561024057600080fd5b5035610b95565b610130610ba7565b61025881610bbb565b5050565b600080516020610d9283398151915281565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816102a1575060006102ff565b60025463ffffffff16805b63ffffffff81166000908152600160205260409020548414156102d4576001925050506102ff565b63ffffffff81166102e35750601e5b6000190163ffffffff80821690831614156102ac576000925050505b919050565b6000600080516020610d928339815191528310610368576040805162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015290519081900360640190fd5b600080516020610d9283398151915282106103b45760405162461bcd60e51b8152600401808060200182810382526021815260200180610d716021913960400191505060405180910390fd5b6040805163f47d33b560e01b8152600481018590526000602482018190528251869391926001600160a01b0389169263f47d33b592604480840193829003018186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d604081101561042d57600080fd5b5080516020909101519092509050600080516020610d928339815191528483089150856001600160a01b031663f47d33b583836040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b15801561049a57600080fd5b505afa1580156104ae573d6000803e3d6000fd5b505050506040513d60408110156104c457600080fd5b50519695505050505050565b60025463ffffffff1681565b60025463ffffffff1660009081526001602052604090205490565b60016020526000908152604090205481565b601e81565b60008161053c57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c6102ff565b816001141561056c57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d6102ff565b816002141561059c57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c2006102ff565b81600314156105cc57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb6102ff565b81600414156105fc57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c96102ff565b816005141561062c57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb549596102ff565b816006141561065c57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c6102ff565b816007141561068c57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb46102ff565b81600814156106bc57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff806102ff565b81600914156106eb57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c0076102ff565b81600a141561071b57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e306102ff565b81600b141561074b57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e56102ff565b81600c141561077b57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f6102ff565b81600d14156107ab57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd6102ff565b81600e14156107db57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb1086102ff565b81600f141561080b57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b66102ff565b816010141561083b57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db618546102ff565b816011141561086b57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea6102ff565b816012141561089b57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d6102ff565b81601314156108cb57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc056102ff565b81601414156108fb57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d46102ff565b816015141561092b57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b29676102ff565b816016141561095b57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc34536102ff565b816017141561098b57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c486102ff565b81601814156109bb57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd16102ff565b81601914156109eb57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c6102ff565b81601a1415610a1b57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce996102ff565b81601b1415610a4b57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f3546102ff565b81601c1415610a7a57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d6102ff565b81601d1415610aaa57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f4276102ff565b81601e1415610ada57507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb6102ff565b81601f1415610b0a57507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc6102ff565b6040805162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015290519081900360640190fd5b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600254640100000000900463ffffffff1681565b6002805460009163ffffffff6401000000009092048216917f0000000000000000000000000000000000000000000000000000000000000000811690910a16811415610c385760405162461bcd60e51b8152600401808060200182810382526030815260200180610db26030913960400191505060405180910390fd5b8083600080805b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015610d095760018516610cac57839250610c8d8163ffffffff1661050e565b63ffffffff821660009081526020819052604090208590559150610cc8565b63ffffffff811660009081526020819052604090205492508391505b610cf37f00000000000000000000000000000000000000000000000000000000000000008484610304565b9350600263ffffffff8616049450600101610c3f565b505060028054601e63ffffffff8083166001908101821692909206811663ffffffff1990931683178455600092835260208290526040909220949094558154938601166401000000000267ffffffff0000000019909316929092179091555090939250505056fe5f72696768742073686f756c6420626520696e7369646520746865206669656c6430644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000014d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c65617665732063616e206265206164646564a264697066735822122057a751049a96ce153d2c30aa1f8cc2d8a6e7a77286e42030a5b6e01f72eb929964736f6c634300070600335f6c6576656c732073686f756c642062652067726561746572207468616e207a65726f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063c2b40ae41161008c578063ec73295911610066578063ec732959146101fe578063ed33639f14610206578063f178e47c1461022a578063fc7e9c6f14610247576100ea565b8063c2b40ae4146101bc578063cd87a3b4146101d9578063e8295588146101e1576100ea565b80636d9833e3116100c85780636d9833e3146101495780638ea3099e1461017a57806390eeb02b146101ac578063ba70f757146101b4576100ea565b80632d287e43146100ef578063414a37ba1461010e5780634ecf518b14610128575b600080fd5b61010c6004803603602081101561010557600080fd5b503561024f565b005b61011661025c565b60408051918252519081900360200190f35b61013061026e565b6040805163ffffffff9092168252519081900360200190f35b6101666004803603602081101561015f57600080fd5b5035610292565b604080519115158252519081900360200190f35b6101166004803603606081101561019057600080fd5b506001600160a01b038135169060208101359060400135610304565b6101306104d0565b6101166104dc565b610116600480360360208110156101d257600080fd5b50356104f7565b610130610509565b610116600480360360208110156101f757600080fd5b503561050e565b610116610b4d565b61020e610b71565b604080516001600160a01b039092168252519081900360200190f35b6101166004803603602081101561024057600080fd5b5035610b95565b610130610ba7565b61025881610bbb565b5050565b600080516020610d9283398151915281565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816102a1575060006102ff565b60025463ffffffff16805b63ffffffff81166000908152600160205260409020548414156102d4576001925050506102ff565b63ffffffff81166102e35750601e5b6000190163ffffffff80821690831614156102ac576000925050505b919050565b6000600080516020610d928339815191528310610368576040805162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015290519081900360640190fd5b600080516020610d9283398151915282106103b45760405162461bcd60e51b8152600401808060200182810382526021815260200180610d716021913960400191505060405180910390fd5b6040805163f47d33b560e01b8152600481018590526000602482018190528251869391926001600160a01b0389169263f47d33b592604480840193829003018186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d604081101561042d57600080fd5b5080516020909101519092509050600080516020610d928339815191528483089150856001600160a01b031663f47d33b583836040518363ffffffff1660e01b81526004018083815260200182815260200192505050604080518083038186803b15801561049a57600080fd5b505afa1580156104ae573d6000803e3d6000fd5b505050506040513d60408110156104c457600080fd5b50519695505050505050565b60025463ffffffff1681565b60025463ffffffff1660009081526001602052604090205490565b60016020526000908152604090205481565b601e81565b60008161053c57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c6102ff565b816001141561056c57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d6102ff565b816002141561059c57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c2006102ff565b81600314156105cc57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb6102ff565b81600414156105fc57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c96102ff565b816005141561062c57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb549596102ff565b816006141561065c57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c6102ff565b816007141561068c57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb46102ff565b81600814156106bc57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff806102ff565b81600914156106eb57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c0076102ff565b81600a141561071b57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e306102ff565b81600b141561074b57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e56102ff565b81600c141561077b57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f6102ff565b81600d14156107ab57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd6102ff565b81600e14156107db57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb1086102ff565b81600f141561080b57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b66102ff565b816010141561083b57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db618546102ff565b816011141561086b57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea6102ff565b816012141561089b57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d6102ff565b81601314156108cb57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc056102ff565b81601414156108fb57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d46102ff565b816015141561092b57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b29676102ff565b816016141561095b57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc34536102ff565b816017141561098b57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c486102ff565b81601814156109bb57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd16102ff565b81601914156109eb57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c6102ff565b81601a1415610a1b57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce996102ff565b81601b1415610a4b57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f3546102ff565b81601c1415610a7a57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d6102ff565b81601d1415610aaa57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f4276102ff565b81601e1415610ada57507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb6102ff565b81601f1415610b0a57507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc6102ff565b6040805162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015290519081900360640190fd5b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600254640100000000900463ffffffff1681565b6002805460009163ffffffff6401000000009092048216917f0000000000000000000000000000000000000000000000000000000000000000811690910a16811415610c385760405162461bcd60e51b8152600401808060200182810382526030815260200180610db26030913960400191505060405180910390fd5b8083600080805b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015610d095760018516610cac57839250610c8d8163ffffffff1661050e565b63ffffffff821660009081526020819052604090208590559150610cc8565b63ffffffff811660009081526020819052604090205492508391505b610cf37f00000000000000000000000000000000000000000000000000000000000000008484610304565b9350600263ffffffff8616049450600101610c3f565b505060028054601e63ffffffff8083166001908101821692909206811663ffffffff1990931683178455600092835260208290526040909220949094558154938601166401000000000267ffffffff0000000019909316929092179091555090939250505056fe5f72696768742073686f756c6420626520696e7369646520746865206669656c6430644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000014d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c65617665732063616e206265206164646564a264697066735822122057a751049a96ce153d2c30aa1f8cc2d8a6e7a77286e42030a5b6e01f72eb929964736f6c63430007060033",
  "immutableReferences": {
    "250": [
      {
        "length": 32,
        "start": 2931
      },
      {
        "length": 32,
        "start": 3277
      }
    ],
    "252": [
      {
        "length": 32,
        "start": 624
      },
      {
        "length": 32,
        "start": 3029
      },
      {
        "length": 32,
        "start": 3137
      }
    ]
  },
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "97:228:7:-:0;;;1759:34:2;;;-1:-1:-1;;;;;;1797:27:2;;;161:95:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;161:95:7;;;;;;;;;1888:11:2;;;1880:59;;;;-1:-1:-1;;;1880:59:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1963:2;1953:7;:12;;;1945:55;;;;;-1:-1:-1;;;1945:55:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2006:16:2;;;;;;;-1:-1:-1;;;;;;2028:16:2;;;;;;;2056:8;2051:80;2074:7;2070:11;;:1;:11;;;2051:80;;;2116:8;;;;:5;:8::i;:::-;2096:17;;;:14;:17;;;;;;;;;;:28;2083:3;;2051:80;;;-1:-1:-1;2148:18:2;;-1:-1:-1;;2154:11:2;;2148:18;:5;:18::i;:::-;2137:8;;;:5;:8;;;:29;-1:-1:-1;97:228:7;;-1:-1:-1;;;97:228:7;4306:3478:2;4353:7;4372:6;4368:3411;;-1:-1:-1;4395:66:2;4380:82;;4368:3411;4477:1;4482;4477:6;4473:3306;;;-1:-1:-1;4500:66:2;4485:82;;4473:3306;4582:1;4587;4582:6;4578:3201;;;-1:-1:-1;4605:66:2;4590:82;;4578:3201;4687:1;4692;4687:6;4683:3096;;;-1:-1:-1;4710:66:2;4695:82;;4683:3096;4792:1;4797;4792:6;4788:2991;;;-1:-1:-1;4815:66:2;4800:82;;4788:2991;4897:1;4902;4897:6;4893:2886;;;-1:-1:-1;4920:66:2;4905:82;;4893:2886;5002:1;5007;5002:6;4998:2781;;;-1:-1:-1;5025:66:2;5010:82;;4998:2781;5107:1;5112;5107:6;5103:2676;;;-1:-1:-1;5130:66:2;5115:82;;5103:2676;5212:1;5217;5212:6;5208:2571;;;-1:-1:-1;5235:66:2;5220:82;;5208:2571;5317:1;5322;5317:6;5313:2466;;;-1:-1:-1;5340:66:2;5325:82;;5313:2466;5422:1;5427:2;5422:7;5418:2361;;;-1:-1:-1;5446:66:2;5431:82;;5418:2361;5528:1;5533:2;5528:7;5524:2255;;;-1:-1:-1;5552:66:2;5537:82;;5524:2255;5634:1;5639:2;5634:7;5630:2149;;;-1:-1:-1;5658:66:2;5643:82;;5630:2149;5740:1;5745:2;5740:7;5736:2043;;;-1:-1:-1;5764:66:2;5749:82;;5736:2043;5846:1;5851:2;5846:7;5842:1937;;;-1:-1:-1;5870:66:2;5855:82;;5842:1937;5952:1;5957:2;5952:7;5948:1831;;;-1:-1:-1;5976:66:2;5961:82;;5948:1831;6058:1;6063:2;6058:7;6054:1725;;;-1:-1:-1;6082:66:2;6067:82;;6054:1725;6164:1;6169:2;6164:7;6160:1619;;;-1:-1:-1;6188:66:2;6173:82;;6160:1619;6270:1;6275:2;6270:7;6266:1513;;;-1:-1:-1;6294:66:2;6279:82;;6266:1513;6376:1;6381:2;6376:7;6372:1407;;;-1:-1:-1;6400:66:2;6385:82;;6372:1407;6482:1;6487:2;6482:7;6478:1301;;;-1:-1:-1;6506:66:2;6491:82;;6478:1301;6588:1;6593:2;6588:7;6584:1195;;;-1:-1:-1;6612:66:2;6597:82;;6584:1195;6694:1;6699:2;6694:7;6690:1089;;;-1:-1:-1;6718:66:2;6703:82;;6690:1089;6800:1;6805:2;6800:7;6796:983;;;-1:-1:-1;6824:66:2;6809:82;;6796:983;6906:1;6911:2;6906:7;6902:877;;;-1:-1:-1;6930:66:2;6915:82;;6902:877;7012:1;7017:2;7012:7;7008:771;;;-1:-1:-1;7036:66:2;7021:82;;7008:771;7118:1;7123:2;7118:7;7114:665;;;-1:-1:-1;7142:66:2;7127:82;;7114:665;7224:1;7229:2;7224:7;7220:559;;;-1:-1:-1;7248:66:2;7233:82;;7220:559;7330:1;7335:2;7330:7;7326:453;;;-1:-1:-1;7354:66:2;7339:82;;7326:453;7436:1;7441:2;7436:7;7432:347;;;-1:-1:-1;7460:66:2;7445:82;;7432:347;7542:1;7547:2;7542:7;7538:241;;;-1:-1:-1;7566:66:2;7551:82;;7538:241;7648:1;7653:2;7648:7;7644:135;;;-1:-1:-1;7672:66:2;7657:82;;7644:135;7750:29;;;-1:-1:-1;;;7750:29:2;;;;;;;;;;;;;;;;;;;;;;;;;;;7644:135;4306:3478;;;:::o;97:228:7:-;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "97:228:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;260:63;;;;;;;;;;;;;;;;-1:-1:-1;260:63:7;;:::i;:::-;;978:114:2;;;:::i;:::-;;;;;;;;;;;;;;;;1289:30;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3687:394;;;;;;;;;;;;;;;;-1:-1:-1;3687:394:2;;:::i;:::-;;;;;;;;;;;;;;;;;;2243:480;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2243:480:2;;;;;;;;;;;;;:::i;1759:34::-;;;:::i;4127:94::-;;;:::i;1666:40::-;;;;;;;;;;;;;;;;-1:-1:-1;1666:40:2;;:::i;1710:45::-;;;:::i;4306:3478::-;;;;;;;;;;;;;;;;-1:-1:-1;4306:3478:2;;:::i;1096:114::-;;;:::i;1254:31::-;;;:::i;:::-;;;;-1:-1:-1;;;;;1254:31:2;;;;;;;;;;;;;;1613:49;;;;;;;;;;;;;;;;-1:-1:-1;1613:49:2;;:::i;1797:27::-;;;:::i;260:63:7:-;304:14;312:5;304:7;:14::i;:::-;;260:63;:::o;978:114:2:-;-1:-1:-1;;;;;;;;;;;978:114:2;:::o;1289:30::-;;;:::o;3687:394::-;3744:4;3760:10;3756:43;;-1:-1:-1;3787:5:2;3780:12;;3756:43;3831:16;;;;;3887:172;3911:8;;;;;;;:5;:8;;;;;;3902:17;;3898:53;;;3938:4;3931:11;;;;;;3898:53;3962:6;;;3958:52;;-1:-1:-1;1753:2:2;3958:52;-1:-1:-1;;4017:3:2;4035:22;;;;;;;;;3887:172;;4071:5;4064:12;;;;3687:394;;;;:::o;2243:480::-;2351:7;-1:-1:-1;;;;;;;;;;;2374:27:2;;2366:72;;;;;-1:-1:-1;;;2366:72:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2452:28:2;;2444:74;;;;-1:-1:-1;;;2444:74:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2584:24;;;-1:-1:-1;;;2584:24:2;;;;;;;;2524:9;2584:24;;;;;;;;2544:5;;2524:9;;-1:-1:-1;;;;;2584:18:2;;;;;:24;;;;;;;;;;:18;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2584:24:2;;;;;;;;;-1:-1:-1;2584:24:2;-1:-1:-1;;;;;;;;;;;;2636:6:2;2625:1;2618:38;2614:42;;2671:7;-1:-1:-1;;;;;2671:18:2;;2690:1;2693;2671:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2671:24:2;;2243:480;-1:-1:-1;;;;;;2243:480:2:o;1759:34::-;;;;;;:::o;4127:94::-;4199:16;;;;4171:7;4193:23;;;:5;:23;;;;;;4127:94;:::o;1666:40::-;;;;;;;;;;;;;:::o;1710:45::-;1753:2;1710:45;:::o;4306:3478::-;4353:7;4372:6;4368:3411;;-1:-1:-1;4395:66:2;4380:82;;4368:3411;4477:1;4482;4477:6;4473:3306;;;-1:-1:-1;4500:66:2;4485:82;;4473:3306;4582:1;4587;4582:6;4578:3201;;;-1:-1:-1;4605:66:2;4590:82;;4578:3201;4687:1;4692;4687:6;4683:3096;;;-1:-1:-1;4710:66:2;4695:82;;4683:3096;4792:1;4797;4792:6;4788:2991;;;-1:-1:-1;4815:66:2;4800:82;;4788:2991;4897:1;4902;4897:6;4893:2886;;;-1:-1:-1;4920:66:2;4905:82;;4893:2886;5002:1;5007;5002:6;4998:2781;;;-1:-1:-1;5025:66:2;5010:82;;4998:2781;5107:1;5112;5107:6;5103:2676;;;-1:-1:-1;5130:66:2;5115:82;;5103:2676;5212:1;5217;5212:6;5208:2571;;;-1:-1:-1;5235:66:2;5220:82;;5208:2571;5317:1;5322;5317:6;5313:2466;;;-1:-1:-1;5340:66:2;5325:82;;5313:2466;5422:1;5427:2;5422:7;5418:2361;;;-1:-1:-1;5446:66:2;5431:82;;5418:2361;5528:1;5533:2;5528:7;5524:2255;;;-1:-1:-1;5552:66:2;5537:82;;5524:2255;5634:1;5639:2;5634:7;5630:2149;;;-1:-1:-1;5658:66:2;5643:82;;5630:2149;5740:1;5745:2;5740:7;5736:2043;;;-1:-1:-1;5764:66:2;5749:82;;5736:2043;5846:1;5851:2;5846:7;5842:1937;;;-1:-1:-1;5870:66:2;5855:82;;5842:1937;5952:1;5957:2;5952:7;5948:1831;;;-1:-1:-1;5976:66:2;5961:82;;5948:1831;6058:1;6063:2;6058:7;6054:1725;;;-1:-1:-1;6082:66:2;6067:82;;6054:1725;6164:1;6169:2;6164:7;6160:1619;;;-1:-1:-1;6188:66:2;6173:82;;6160:1619;6270:1;6275:2;6270:7;6266:1513;;;-1:-1:-1;6294:66:2;6279:82;;6266:1513;6376:1;6381:2;6376:7;6372:1407;;;-1:-1:-1;6400:66:2;6385:82;;6372:1407;6482:1;6487:2;6482:7;6478:1301;;;-1:-1:-1;6506:66:2;6491:82;;6478:1301;6588:1;6593:2;6588:7;6584:1195;;;-1:-1:-1;6612:66:2;6597:82;;6584:1195;6694:1;6699:2;6694:7;6690:1089;;;-1:-1:-1;6718:66:2;6703:82;;6690:1089;6800:1;6805:2;6800:7;6796:983;;;-1:-1:-1;6824:66:2;6809:82;;6796:983;6906:1;6911:2;6906:7;6902:877;;;-1:-1:-1;6930:66:2;6915:82;;6902:877;7012:1;7017:2;7012:7;7008:771;;;-1:-1:-1;7036:66:2;7021:82;;7008:771;7118:1;7123:2;7118:7;7114:665;;;-1:-1:-1;7142:66:2;7127:82;;7114:665;7224:1;7229:2;7224:7;7220:559;;;-1:-1:-1;7248:66:2;7233:82;;7220:559;7330:1;7335:2;7330:7;7326:453;;;-1:-1:-1;7354:66:2;7339:82;;7326:453;7436:1;7441:2;7436:7;7432:347;;;-1:-1:-1;7460:66:2;7445:82;;7432:347;7542:1;7547:2;7542:7;7538:241;;;-1:-1:-1;7566:66:2;7551:82;;7538:241;7648:1;7653:2;7648:7;7644:135;;;-1:-1:-1;7672:66:2;7657:82;;7644:135;7750:29;;;-1:-1:-1;;;7750:29:2;;;;;;;;;;;;-1:-1:-1;;;7750:29:2;;;;;;;;;;;;;;1096:114;1133:77;1096:114;:::o;1254:31::-;;;:::o;1613:49::-;;;;;;;;;;;;;;:::o;1797:27::-;;;;;;;;;:::o;2727:888::-;2817:9;;;2777:12;;2817:9;;;;;;;;2865:6;2854:17;;;;;2840:31;;;;2832:92;;;;-1:-1:-1;;;2832:92:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2952:10;2995:5;2930:19;;;3044:360;3067:6;3063:10;;:1;:10;;;3044:360;;;3092:16;;;3088:224;;3132:16;3125:23;;3166:8;3172:1;3166:8;;:5;:8::i;:::-;3184:17;;;:14;:17;;;;;;;;;;:36;;;3158:16;-1:-1:-1;3088:224:2;;;3252:17;;;:14;:17;;;;;;;;;;;;-1:-1:-1;3287:16:2;;-1:-1:-1;3088:224:2;3338:34;3352:6;3360:4;3366:5;3338:13;:34::i;:::-;3319:53;-1:-1:-1;3396:1:2;3380:17;;;;;-1:-1:-1;3075:3:2;;3044:360;;;-1:-1:-1;;3433:16:2;;;1753:2;3432:42;3433:16;;;;:20;;;3432:42;;;;;;3480:31;;-1:-1:-1;;3480:31:2;;;;;;;-1:-1:-1;3517:19:2;;;;;;;;;;;:38;;;;3561:26;;3573:14;;;3561:26;;;-1:-1:-1;;3561:26:2;;;;;;;;;;-1:-1:-1;3573:14:2;;;-1:-1:-1;;;2727:888:2:o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../MerkleTreeWithHistory.sol\";\n\ncontract MerkleTreeWithHistoryMock is MerkleTreeWithHistory {\n  constructor(uint32 _treeLevels, IHasher _hasher) MerkleTreeWithHistory(_treeLevels, _hasher) {}\n\n  function insert(bytes32 _leaf) public {\n    _insert(_leaf);\n  }\n}\n",
  "sourcePath": "/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/Mocks/MerkleTreeWithHistoryMock.sol",
  "ast": {
    "absolutePath": "/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/Mocks/MerkleTreeWithHistoryMock.sol",
    "exportedSymbols": {
      "IHasher": [
        242
      ],
      "MerkleTreeWithHistory": [
        897
      ],
      "MerkleTreeWithHistoryMock": [
        1042
      ]
    },
    "id": 1043,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1016,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:7"
      },
      {
        "absolutePath": "/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/MerkleTreeWithHistory.sol",
        "file": "../MerkleTreeWithHistory.sol",
        "id": 1017,
        "nodeType": "ImportDirective",
        "scope": 1043,
        "sourceUnit": 898,
        "src": "57:38:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1018,
              "name": "MerkleTreeWithHistory",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 897,
              "src": "135:21:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTreeWithHistory_$897",
                "typeString": "contract MerkleTreeWithHistory"
              }
            },
            "id": 1019,
            "nodeType": "InheritanceSpecifier",
            "src": "135:21:7"
          }
        ],
        "contractDependencies": [
          897
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 1042,
        "linearizedBaseContracts": [
          1042,
          897
        ],
        "name": "MerkleTreeWithHistoryMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1030,
              "nodeType": "Block",
              "src": "254:2:7",
              "statements": []
            },
            "id": 1031,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1026,
                    "name": "_treeLevels",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1021,
                    "src": "232:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  {
                    "id": 1027,
                    "name": "_hasher",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1023,
                    "src": "245:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IHasher_$242",
                      "typeString": "contract IHasher"
                    }
                  }
                ],
                "id": 1028,
                "modifierName": {
                  "id": 1025,
                  "name": "MerkleTreeWithHistory",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 897,
                  "src": "210:21:7",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MerkleTreeWithHistory_$897_$",
                    "typeString": "type(contract MerkleTreeWithHistory)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "210:43:7"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1021,
                  "mutability": "mutable",
                  "name": "_treeLevels",
                  "nodeType": "VariableDeclaration",
                  "scope": 1031,
                  "src": "173:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 1020,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "173:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1023,
                  "mutability": "mutable",
                  "name": "_hasher",
                  "nodeType": "VariableDeclaration",
                  "scope": 1031,
                  "src": "193:15:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IHasher_$242",
                    "typeString": "contract IHasher"
                  },
                  "typeName": {
                    "id": 1022,
                    "name": "IHasher",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 242,
                    "src": "193:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IHasher_$242",
                      "typeString": "contract IHasher"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "172:37:7"
            },
            "returnParameters": {
              "id": 1029,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "254:0:7"
            },
            "scope": 1042,
            "src": "161:95:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1040,
              "nodeType": "Block",
              "src": "298:25:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1037,
                        "name": "_leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "312:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 1036,
                      "name": "_insert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 532,
                      "src": "304:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_uint32_$",
                        "typeString": "function (bytes32) returns (uint32)"
                      }
                    },
                    "id": 1038,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "304:14:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "id": 1039,
                  "nodeType": "ExpressionStatement",
                  "src": "304:14:7"
                }
              ]
            },
            "functionSelector": "2d287e43",
            "id": 1041,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "insert",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1034,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1033,
                  "mutability": "mutable",
                  "name": "_leaf",
                  "nodeType": "VariableDeclaration",
                  "scope": 1041,
                  "src": "276:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1032,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "276:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "275:15:7"
            },
            "returnParameters": {
              "id": 1035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "298:0:7"
            },
            "scope": 1042,
            "src": "260:63:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1043,
        "src": "97:228:7"
      }
    ],
    "src": "32:294:7"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/Mocks/MerkleTreeWithHistoryMock.sol",
      "exportedSymbols": {
        "IHasher": [
          242
        ],
        "MerkleTreeWithHistory": [
          897
        ],
        "MerkleTreeWithHistoryMock": [
          1042
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.7",
            ".0"
          ]
        },
        "id": 1016,
        "name": "PragmaDirective",
        "src": "32:23:7"
      },
      {
        "attributes": {
          "SourceUnit": 898,
          "absolutePath": "/Users/sohamzemse/Workspace/Eth-Projects/ANON/anon-monorepo/packages/anon-core/contracts/MerkleTreeWithHistory.sol",
          "file": "../MerkleTreeWithHistory.sol",
          "scope": 1043,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1017,
        "name": "ImportDirective",
        "src": "57:38:7"
      },
      {
        "attributes": {
          "abstract": false,
          "contractDependencies": [
            897
          ],
          "contractKind": "contract",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            1042,
            897
          ],
          "name": "MerkleTreeWithHistoryMock",
          "scope": 1043
        },
        "children": [
          {
            "attributes": {},
            "children": [
              {
                "attributes": {
                  "name": "MerkleTreeWithHistory",
                  "referencedDeclaration": 897,
                  "type": "contract MerkleTreeWithHistory"
                },
                "id": 1018,
                "name": "UserDefinedTypeName",
                "src": "135:21:7"
              }
            ],
            "id": 1019,
            "name": "InheritanceSpecifier",
            "src": "135:21:7"
          },
          {
            "attributes": {
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "name": "",
              "scope": 1042,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "_treeLevels",
                      "scope": 1031,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint32",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint32",
                          "type": "uint32"
                        },
                        "id": 1020,
                        "name": "ElementaryTypeName",
                        "src": "173:6:7"
                      }
                    ],
                    "id": 1021,
                    "name": "VariableDeclaration",
                    "src": "173:18:7"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "_hasher",
                      "scope": 1031,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "contract IHasher",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "IHasher",
                          "referencedDeclaration": 242,
                          "type": "contract IHasher"
                        },
                        "id": 1022,
                        "name": "UserDefinedTypeName",
                        "src": "193:7:7"
                      }
                    ],
                    "id": 1023,
                    "name": "VariableDeclaration",
                    "src": "193:15:7"
                  }
                ],
                "id": 1024,
                "name": "ParameterList",
                "src": "172:37:7"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1029,
                "name": "ParameterList",
                "src": "254:0:7"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 897,
                      "type": "type(contract MerkleTreeWithHistory)",
                      "value": "MerkleTreeWithHistory"
                    },
                    "id": 1025,
                    "name": "Identifier",
                    "src": "210:21:7"
                  },
                  {
                    "attributes": {
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1021,
                      "type": "uint32",
                      "value": "_treeLevels"
                    },
                    "id": 1026,
                    "name": "Identifier",
                    "src": "232:11:7"
                  },
                  {
                    "attributes": {
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 1023,
                      "type": "contract IHasher",
                      "value": "_hasher"
                    },
                    "id": 1027,
                    "name": "Identifier",
                    "src": "245:7:7"
                  }
                ],
                "id": 1028,
                "name": "ModifierInvocation",
                "src": "210:43:7"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 1030,
                "name": "Block",
                "src": "254:2:7"
              }
            ],
            "id": 1031,
            "name": "FunctionDefinition",
            "src": "161:95:7"
          },
          {
            "attributes": {
              "functionSelector": "2d287e43",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "insert",
              "scope": 1042,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "_leaf",
                      "scope": 1041,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bytes32",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bytes32",
                          "type": "bytes32"
                        },
                        "id": 1032,
                        "name": "ElementaryTypeName",
                        "src": "276:7:7"
                      }
                    ],
                    "id": 1033,
                    "name": "VariableDeclaration",
                    "src": "276:13:7"
                  }
                ],
                "id": 1034,
                "name": "ParameterList",
                "src": "275:15:7"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 1035,
                "name": "ParameterList",
                "src": "298:0:7"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "tryCall": false,
                          "type": "uint32",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 532,
                              "type": "function (bytes32) returns (uint32)",
                              "value": "_insert"
                            },
                            "id": 1036,
                            "name": "Identifier",
                            "src": "304:7:7"
                          },
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 1033,
                              "type": "bytes32",
                              "value": "_leaf"
                            },
                            "id": 1037,
                            "name": "Identifier",
                            "src": "312:5:7"
                          }
                        ],
                        "id": 1038,
                        "name": "FunctionCall",
                        "src": "304:14:7"
                      }
                    ],
                    "id": 1039,
                    "name": "ExpressionStatement",
                    "src": "304:14:7"
                  }
                ],
                "id": 1040,
                "name": "Block",
                "src": "298:25:7"
              }
            ],
            "id": 1041,
            "name": "FunctionDefinition",
            "src": "260:63:7"
          }
        ],
        "id": 1042,
        "name": "ContractDefinition",
        "src": "97:228:7"
      }
    ],
    "id": 1043,
    "name": "SourceUnit",
    "src": "32:294:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-04-14T22:58:26.171Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}